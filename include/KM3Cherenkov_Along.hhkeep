////////////////////////////////////////////////////////////////////////

#ifndef KM3Cherenkov_H
#define KM3Cherenkov_H 1

/////////////
// Includes
/////////////

#include "globals.hh"
#include "templates.hh"
#include "Randomize.hh"
#include "G4ThreeVector.hh"
#include "G4ParticleMomentum.hh"
#include "G4Step.hh"
#include "G4VContinuousProcess.hh"
#include "G4OpticalPhoton.hh"
#include "G4DynamicParticle.hh"
#include "G4Material.hh" 
#include "G4PhysicsTable.hh"
#include "G4MaterialPropertiesTable.hh"
#include "G4PhysicsOrderedFreeVector.hh"
#include "KM3Detector.hh"
#ifndef G4DISABLE_PARAMETRIZATION
#ifdef G4ENABLE_MIE
#include "KM3EMDirectFlux.hh"
#endif
#endif
// Class Description:
// Continuous Process -- Generation of Cerenkov Photons.
// Class inherits publicly from G4VContinuousProcess.
// Class Description - End:

/////////////////////
// Class Definition
/////////////////////
class KM3Cherenkov : public G4VContinuousProcess  
{

private:

public: // Without description

	////////////////////////////////
	// Constructors and Destructor
	////////////////////////////////

	KM3Cherenkov(const G4String& processName = "KM3Cherenkov");

	// G4Cerenkov(const G4Cerenkov &right);

	~KM3Cherenkov();	

        ////////////
        // Methods
        ////////////

public: // With description
  
  void SetDetector(KM3Detector*);

  G4bool IsApplicable(const G4ParticleDefinition& aParticleType);
  // Returns true -> 'is applicable', for all charged particles.
  
  G4double GetContinuousStepLimit(const G4Track& aTrack,
				  G4double  ,
				  G4double  ,
				  G4double& );
  // Returns the continuous step limit defined by the Cerenkov
  // process.
  
  G4VParticleChange* AlongStepDoIt(const G4Track& aTrack, 
				   const G4Step&  aStep);
  // This is the method implementing the Cerenkov process.

  void SetTrackSecondariesFirst(const G4bool state);
  // If set, the primary particle tracking is interrupted and any 
  // produced Cerenkov photons are tracked next. When all have 
  // been tracked, the tracking of the primary resumes. 
  
  void SetMaxNumPhotonsPerStep(const G4int NumPhotons);
  // Set the maximum number of Cerenkov photons allowed to be 
  // generated during a tracking step. This is an average ONLY; 
  // the actual number will vary around this average. If invoked, 
  // the maximum photon stack will roughly be of the size set.
  // If not called, the step is not limited by the number of 
  // photons generated.

  G4PhysicsTable* GetPhysicsTable() const;
  // Returns the address of the physics table.
  
  void DumpPhysicsTable() const;
  // Prints the physics table.
  
#if !defined(G4MYEM_PARAMETERIZATION) && !defined(G4MYHA_PARAMETERIZATION)
#ifdef G4ENABLE_MIE
#ifndef G4DISABLE_PARAMETRIZATION
  void CreateDirectPhotons(void);
  std::vector<G4ThreeVector>* poskeep;
  std::vector<G4double>* timekeep;
  std::vector<G4int>* idprikeep;
  std::vector<G4double>* depenekeep;
  std::vector<G4ThreeVector>* dirkeep;
#endif
#endif
#endif

private:

  void BuildThePhysicsTable();
  
  /////////////////////
  // Helper Functions
  /////////////////////

  G4double GetAverageNumberOfPhotons(const G4DynamicParticle *aParticle,
				     const G4Material *aMaterial,
				     G4MaterialPropertyVector* Rindex) const;
  
  ///////////////////////
  // Class Data Members
  ///////////////////////
  
protected:
  G4PhysicsTable* thePhysicsTable;
  //  A Physics Table can be either a cross-sections table or
  //  an energy table (or can be used for other specific
  //  purposes).

private:

  G4bool fTrackSecondariesFirst;
  G4int  fMaxPhotons;
  KM3Detector* MyStDetector;
  G4double MaxAbsDist;
  G4double M_PI2;
  G4double MinMeanNumberOfPhotonsForParam;
#ifndef G4DISABLE_PARAMETRIZATION
#ifdef G4ENABLE_MIE
  KM3EMDirectFlux* myFlux;
#endif
#endif
#ifndef G4ENABLE_MIE
  G4double HITBENTHOS[20000][10];
  G4int icountHitBenthos;
  G4double globalMaxCos,globalMinCos;
  G4ThreeVector parent;
  G4ThreeVector parent1;
  void myrotate(G4ThreeVector &x, const G4ThreeVector& p0);
  G4int PhotonHitsaBenthos(G4double x1,G4double y1,G4double z1,G4double px,G4double py,G4double pz,G4double x0,G4double y0,G4double z0,G4double r,G4double dir1,G4double dir2, G4double dir3);
  G4int checkIfParticleCanEmitToShpere(G4ThreeVector center,G4double r,G4double minCos, G4double maxCos, G4double &minPhi, G4double &maxPhi, G4int icare);
  G4int mycheckParticleOneStar(const G4ThreeVector &p0, const G4ThreeVector &x0, const G4ThreeVector &xx0, const G4double &minCos, const G4double &maxCos);
  void myIterativeCheck(Spheres* mySphere,const G4ThreeVector &p0,const G4double &minCos,const G4double &maxCos);
  G4int checkPhi(const G4double& aphi);
  G4int PhotonHitsAnyBenthos(G4ThreeVector r,G4ParticleMomentum p);
#endif
};

////////////////////
// Inline methods
////////////////////

inline 
G4bool KM3Cherenkov::IsApplicable(const G4ParticleDefinition& aParticleType)
{
   return (aParticleType.GetPDGCharge() != 0);
}

inline 
void KM3Cherenkov::SetTrackSecondariesFirst(const G4bool state) 
{ 
	fTrackSecondariesFirst = state;
}

inline
void KM3Cherenkov::SetMaxNumPhotonsPerStep(const G4int NumPhotons) 
{ 
	fMaxPhotons = NumPhotons;
}

inline
void KM3Cherenkov::DumpPhysicsTable() const
{
        G4int PhysicsTableSize = thePhysicsTable->entries();
        G4PhysicsOrderedFreeVector *v;

        for (G4int i = 0 ; i < PhysicsTableSize ; i++ )
        {
        	v = (G4PhysicsOrderedFreeVector*)(*thePhysicsTable)[i];
        	v->DumpValues();
        }
}

inline G4PhysicsTable* KM3Cherenkov::GetPhysicsTable() const
{
  return thePhysicsTable;
}

#endif /* G4Cerenkov_h */

