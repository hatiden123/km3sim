#ifndef KM3EMTimePointDis_h
#define KM3EMTimePointDis_h 1

#include <vector>
#include "globals.hh"
#include <iostream>
#include <fstream>
#include <iomanip>
#include "G4ExceptionHandler.hh"

struct onePE {
  G4double time;
  G4double costh;
  G4double phi;
};

class KM3EMTimePointDis {
public:
  KM3EMTimePointDis(std::ifstream &, bool &ok);
  ~KM3EMTimePointDis();

public:
  onePE GetSamplePoint();
  G4double GiveAngle() { return angle; };
  G4double GiveFlux() { return Flux; };
  G4double GiveFluxRMS() { return FluxRMS; };
  bool IsValid() { return IsThisValid; };

private:
  std::vector<G4float> *keepDis;
  std::vector<G4float> *keepExpoCTh2;
  std::vector<G4float> *keepExpoTh3;
  std::vector<G4float> *keepTh2Th3Num;
  G4double phi2;
  G4double phi3;
  G4double phi4;
  G4double phi5;
  G4double phi6;
  G4double pi2;
  G4double angle;
  G4double Flux;
  G4double FluxRMS;
  bool IsThisValid;
};

#endif
