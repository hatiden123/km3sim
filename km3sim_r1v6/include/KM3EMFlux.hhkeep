// Class for the implementation of the flux from em showers

#ifndef KM3EMFlux_h
#define KM3EMFlux_h 1

#include <stdio.h>
#include <vector>
#include "globals.hh"

class KM3EMFlux {
public:
  KM3EMFlux();
  ~KM3EMFlux();

public:
  void Initialize(); // reads data from files
  void SetEnergy(G4double);
  G4bool ModelTrigger(G4double);
  G4int GiveNum(G4double area, G4int zbin, G4double Distance, G4double Theta,
                G4double qe);
  G4int GiveMaxZbin();
  inline G4double GiveZBinning();
  inline G4double GiveLCoeff();

private:
  G4double divdif(G4double F[], G4double A[], G4int NN, G4double X, G4int MM);
  G4bool extrapolate(G4double F[], G4double A[]);
  std::vector<G4double> keepData;
  std::vector<G4double> keepDatarms;
  G4double Energy;
  G4int NumOfEnergies;
  G4double Energies[100];
  G4int Zbins[100];
  G4double MaxZ[100];
  G4double zbinning;
  G4double thetabinningdeg;
  G4double thetabinningrad;
  G4double M_PI2;
  G4int ienbin1;
  G4int ienbin2;
  G4int ienstart;
  G4int ienstop;
  G4int IStart[100][200];
  G4double lamdacoeff;
};

inline G4double KM3EMFlux::GiveZBinning() { return zbinning; }
inline G4double KM3EMFlux::GiveLCoeff() { return lamdacoeff; }

#endif
